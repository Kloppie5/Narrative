using System;
using System.IO;

namespace SaveFileEditor {

    class MonsterHunterWorldSaveFileEditor : SaveFileEditor {

        private static class Precomputed_Blowfish {

            /**
            * Blowfish is a Feistel cipher;
            * - symmetric-key
            * - 16 rounds
            * - 64-bit block size
            * - key-dependent S-boxes
            *		based on de hexadecimal digits of pi, XORed with the P-entries
            *
            *	Precomputed P and S-boxes for byte swapping and key xieZjoe#P2134-3zmaghgpqoe0z8$3azeq
            */

            private static readonly UInt32[] P = new UInt32[] {
                0xF3BF925F, 0xB70066B9, 0xEEFE034C, 0xE244DD49, 0x13DAB192, 0x8224CA0B,
                0x00B4A0BC, 0xE8DDD9C9, 0x152F7A65, 0xBE8E1FA2, 0xEB3E80B9, 0x7B79BFAF,
                0x5FB8D2B1, 0xA2D1B92A, 0xAB8ABC56, 0x732BC465, 0xAF78E6CB, 0x88A9FADA
            };

            private static readonly UInt32[] S1 = {
                0x8370E579, 0x44A4B9E1, 0xF86CB0C4, 0xAD3A1D82, 0xBFC9F4D9, 0x830FD084, 0xDDD55160, 0xD4E99F58,
                0x318BA9FD, 0x5B5EA752, 0x0039F139, 0x9FCFD3FF, 0xA2D8D4C7, 0x355027D3, 0xB5C9C8F9, 0x7E2F0C86,
                0x835911B0, 0x16CE9675, 0xB518A552, 0xCE5E35FF, 0x09AFD0FF, 0xBC94FE59, 0xF3F33ED7, 0xCF852D5C,
                0xEFBFF552, 0xB34ACB23, 0x7260EE5E, 0x75D8A99C, 0x99C70C57, 0xCB2CD958, 0xA0169A06, 0xD105A561,
                0xF7AF0DD4, 0xB8FB52FD, 0xAE2C84DA, 0x0D0D100A, 0xFA0C022C, 0x86B903C7, 0xC4C5B4FE, 0x615F6267,
                0x336E9AD4, 0x0B183722, 0x8610630C, 0xB34D3166, 0x92AF7610, 0x85565294, 0x77551AAF, 0x4E28293B,
                0x67BB223D, 0xEFA9C870, 0x803B524B, 0x9EEFEF69, 0x2F7E0AD8, 0x469798AA, 0xEA5F8324, 0x343EDD07,
                0x5ED75387, 0x596CED72, 0x7D4AF89D, 0xFBE89653, 0xA0834324, 0x9A55F0F1, 0x6D153488, 0xE9143B55,
                0x79E074EA, 0x298B7579, 0xECE59DED, 0x5FD30916, 0x6A12B2B5, 0xF250554F, 0x8D6F5BB3, 0xA901AE88,
                0x103008DF, 0x2B9F18FB, 0x728140BD, 0xE9540AB0, 0xD8D79BA8, 0xFAFFA771, 0xA5868EE9, 0x803E9B91,
                0xEF31892A, 0x7ECE0634, 0xEA0F7023, 0xB5662AD8, 0x60A67A22, 0xEBF0F257, 0xC75060A6, 0xA92EAB70,
                0x9805E7FA, 0x94A814CC, 0xFBBF29A6, 0x28D2CE96, 0xF3AF3058, 0xD55FCEA1, 0x2A966F85, 0xA59BA22D,
                0xAB92B4A8, 0x73070FB7, 0x759B775B, 0x8F9C31F0, 0x550A49C0, 0x465A429B, 0x5D2CE134, 0x24FCE988,
                0x7B8220C3, 0x1332FA33, 0xCA110F0E, 0x5C8892B8, 0x29950C2B, 0xC97681EF, 0x68C94EE2, 0xD440A225,
                0xA1D41591, 0xA7C8FD27, 0xF856F1F5, 0xE9FBF80B, 0x9EE4095D, 0x7CD7ABB8, 0x1F724886, 0x5FD2208D,
                0xA11D1645, 0xC52EED06, 0x3A385C49, 0x333B049D, 0xA9D56D35, 0x7A0A1359, 0xD54ACDE5, 0x672F80D8,
                0x650E145C, 0x1D5623B3, 0xC110A6E1, 0x938368C6, 0x7FB204E4, 0x09532FC6, 0x5708B3BE, 0x53775340,
                0x7945CBF2, 0xAE4B3ED8, 0x4A032DE2, 0x732D0BBA, 0x30124CF7, 0xCE34059F, 0x3B725A0B, 0x0A11D858,
                0x04D0C266, 0xCA5A8CFD, 0x11596B89, 0xDEBEBD47, 0x904727C3, 0x8348E80B, 0x96821CF4, 0xC6E38043,
                0x8DD91C81, 0xF7486116, 0xAD9AB173, 0x55F94456, 0x39B8ADFD, 0x9D0844DB, 0x5B0E5DDB, 0x533BB734,
                0x271F68AB, 0x41DE71A7, 0x111BE94E, 0x4146E77A, 0x9FA4A8D0, 0xC5CC2387, 0xAA52ECD0, 0xD5788D9A,
                0xA0E22D23, 0xF915F1AC, 0x87A85298, 0xD3357D1C, 0x8F73B716, 0x2F999C00, 0xABAD8AEA, 0x6C27A8E3,
                0x4C4E24C1, 0x6DCE6EB8, 0xBDD584B7, 0x3A3A72C2, 0x62347533, 0xF17882C9, 0x4B6F9EB0, 0x53BEBAA5,
                0xB32E36BF, 0x7BC3BC7E, 0x6266B6E6, 0xADB3E8E7, 0xBD83F6B2, 0x75105FAC, 0xDA42A27A, 0xAB1A895B,
                0xBDD7717D, 0x00EBB19C, 0x18A128DF, 0x0141707A, 0xEA8A050C, 0x156D1B72, 0x48C77B38, 0x1D5D1557,
                0xF53CC0C9, 0x3E82CC31, 0x77C96BC6, 0xE7EFAC58, 0xF7941878, 0x7899B1AA, 0x92A0E21C, 0x6CBA87E3,
                0xA0308E83, 0xF45D27B3, 0x4D58DCFF, 0x4A3C05B4, 0x5AAB0446, 0x7FEA3DCA, 0x3406CDAE, 0x6871DADD,
                0x2E4E54FD, 0x893D066F, 0x2D59156E, 0xBC0EC30D, 0x5B51F85D, 0xA29FFC07, 0x27103C0A, 0x85E5810B,
                0xC4B59B82, 0x8192E374, 0x3EE784CA, 0x8205B9C6, 0x710A1BEA, 0x2074CC30, 0x157A012A, 0x1BAC6E0E,
                0x69917FD6, 0xB7B71C77, 0xF72A68D1, 0xE3CBB537, 0x18F43434, 0xB503F818, 0x4CE7CF6C, 0x13F0825A,
                0xC0321868, 0x17ADBC21, 0xAEACD351, 0x71C9634F, 0x1210ED55, 0xFB1873F2, 0x1142E2C1, 0xC7FD983C,
                0x3501708E, 0xB78244AF, 0x6D12AE9B, 0x33A5C535, 0x848307DE, 0x9FD26D52, 0x0B28128F, 0x66467D9D
            };
            private static readonly UInt32[] S2 = {
                0x7714889C, 0xF89F95D0, 0x8ECC344E, 0xFC7540A8, 0x554A4BC4, 0x8B2043C2, 0x7435B4B8, 0xCBEC7455,
                0x7A338AE7, 0xA722D039, 0x1C742F9F, 0xB1464062, 0xF0A9DF6E, 0xD65CB1D2, 0x0F919952, 0xFBC98467,
                0x0B967439, 0xE29503F3, 0xFE167E67, 0xF577DD70, 0x0EA52CDC, 0x68EDA9CD, 0xE2C1DC64, 0x6D97D236,
                0xBF130C5E, 0x66ECFA14, 0xE975303D, 0x8F179292, 0x778E5DD7, 0x54EE304C, 0xD1E0ED71, 0x4756651B,
                0x4BA50714, 0x754BF42C, 0x10EB073B, 0x11C22C25, 0xBC4DB468, 0xD9A248C2, 0x2519BA88, 0x175C8781,
                0xE60FCB43, 0xB4356D85, 0x207A4177, 0x0D159399, 0x153B3062, 0x0D146A37, 0x3F6E7071, 0xE6094AE9,
                0x3C25C9BE, 0x7FB521E2, 0x12B960B2, 0x29A175D8, 0x6C4016B7, 0xB94AE5F9, 0x0FD38E53, 0xE2510506,
                0x61D42700, 0x3141555B, 0x05B2B80E, 0x0D72792B, 0xA7580C76, 0x8E5E2AF7, 0xD219883D, 0x455D66D4,
                0xF532B238, 0x91626823, 0x54BCC490, 0xA16D1718, 0xE99DA5E6, 0xC25CC982, 0x749183B8, 0x18889CC6,
                0xCF68BC7E, 0x7190030C, 0x9C97A738, 0x47367A55, 0x2E34A198, 0xF997D250, 0xAE1633FC, 0xFBC24D44,
                0x4CC604E9, 0x4A6DB903, 0x0BF3E539, 0x739866E1, 0x54EBE56B, 0x3ADC761D, 0x5A80B9F1, 0x828308B4,
                0x234A447E, 0x4A57DE7A, 0xEEAD8A52, 0x5E706632, 0xEF7439AA, 0x4B40F4FF, 0x2A5BB650, 0x78492E1D,
                0xE62DAE10, 0x5F08CA34, 0x979E2724, 0x541AB037, 0x57E854F7, 0x18083290, 0xD2F3EA6B, 0x835E53E7,
                0xB43EE8A3, 0xB729D403, 0xB68995B0, 0x3A19593D, 0x5C705B12, 0x6635A717, 0xDF02C304, 0xDBB60EC4,
                0xB7D56959, 0x5989C1BD, 0x53FA3125, 0x180D03BE, 0xAF099607, 0x23199C31, 0x50CA488C, 0x9BAB3B5D,
                0x8814ED0A, 0x98C49BBF, 0xA21B53AB, 0x7623FD9A, 0x9F921107, 0xC23F4ECB, 0xA5595C80, 0xC96B9A89,
                0x7A817358, 0x5B3123BD, 0x0C4B1D12, 0x678ABE0C, 0x54C2A141, 0xCB85D689, 0x775EBA93, 0xC35293ED,
                0xD389F09C, 0x408F19C7, 0x4F63B7AE, 0xB8DE93C1, 0x5C8D5E85, 0x36DC656C, 0x2097B236, 0x3430E5E5,
                0xBBEBB059, 0x4F12CB48, 0x1639B7E5, 0x5EEF7173, 0xDD86E39D, 0x46AA0831, 0x9A270E68, 0x97180892,
                0x3B8CEB76, 0x03D6629F, 0x28387633, 0x8B83C2A5, 0x4ECDD2CE, 0xC2517456, 0x5B2A0C29, 0x092FA44F,
                0xD56BECE5, 0xC48C79D7, 0x1537DEF2, 0x088AB573, 0xEA120B69, 0x2E29020F, 0x92F1D02D, 0x42F63B42,
                0x88109F63, 0x14B898FE, 0x92053D7D, 0xB417AEDE, 0xF0DDEAD0, 0x0BF392E7, 0xFF57DE49, 0xC422C334,
                0xD5EAF945, 0x76117D1C, 0x7493E5F9, 0x89CE08CD, 0xF3E955B1, 0x684E8AFE, 0x48129654, 0xCB315D7F,
                0xE2577A33, 0x26BA0B20, 0xADE7E8E3, 0xFFCB9785, 0x16501201, 0x37DFEA4D, 0xC6F5EA18, 0x15064DBF,
                0x7C973CCB, 0x9D0582F8, 0x8B1CDF92, 0x62A04738, 0x7904E83E, 0xDDA1A910, 0xAD93AEEA, 0x225DD14F,
                0xED1F770A, 0x87035455, 0x943CA8AD, 0x90E4BBF0, 0x8E1A4159, 0xAED69488, 0xA1B2E865, 0xBBAAD5B8,
                0x0658F48B, 0x1FAB64D8, 0x0E56350E, 0xA11BEE93, 0x74D5E32E, 0x68919CAE, 0x89CF8D33, 0x13C1276A,
                0xB345392B, 0x19A4299F, 0x2BEBAC00, 0xDD035E25, 0x05F63B19, 0x03F7C6FC, 0xF31D04BC, 0xFE393E7C,
                0x0876018A, 0x229617B3, 0xACDFAA1B, 0xAC61CA42, 0x60BFCBCD, 0x1261885C, 0x30D24A1B, 0x623BD13E,
                0xCBFBECF3, 0xD2D0EC61, 0xDD90C430, 0xE736D69B, 0xD8D05CA8, 0x19EFB299, 0xCD34C192, 0xD7DC45C6,
                0xF7274458, 0x74E226CB, 0x04665779, 0xCE257B71, 0xD9BD0BE3, 0x38EB9B67, 0x376E9169, 0x1B2C4AEE,
                0x38A7F1E9, 0xBB87E7CB, 0x950B9FFE, 0x705F345F, 0x044CB99B, 0x92A71C6F, 0x60738A0D, 0x3B197EFC
            };
            private static readonly UInt32[] S3 = {
                0x5645F1DC, 0x5CAD09A5, 0xCFE62DA6, 0x16FAF4ED, 0x3ED8F473, 0x53F17FA6, 0x71A0D777, 0x0F12D82B,
                0x3370A419, 0xA6BA3661, 0xED2573F5, 0x59AD4B0B, 0xABB9DA59, 0x548087BF, 0xD6B446A1, 0x3CB4E9E8,
                0x5B5B13F5, 0xEEDEF32C, 0x825EF7A8, 0x4301BCA0, 0x1EC53D4A, 0x448CB0C1, 0xC16C2D0A, 0x8DDE3BD7,
                0x102E3586, 0x1D6CAE03, 0x68227782, 0x501A5810, 0x3F16036B, 0xEF6B4CEE, 0xE00F9C1B, 0xFC173265,
                0x7CC97E7E, 0x3EE8405D, 0x67ACB0CA, 0x248FF385, 0x93CF276E, 0x134AD39E, 0x5EEEE4B5, 0xBCBB0B32,
                0xFDFBD53B, 0xA44111A5, 0x0AF4EFD7, 0x3D5DFD49, 0xC4C94667, 0xC91564DF, 0x9C07085D, 0x6657452D,
                0xC90E612A, 0xBD536775, 0x34A4C293, 0x1C4D862E, 0xDA74353D, 0xC8B33BAA, 0xCE45E538, 0xCED3CFA2,
                0x8D0A3D8F, 0x3B33DAA2, 0x16771D35, 0x597C44B4, 0x1CA0FD49, 0x8FBF0213, 0x46AADF5A, 0x543DCBD1,
                0xF7B4C368, 0xF8DF0296, 0xB0013FB8, 0xCBD32B54, 0x9CB09DC7, 0xCCA05166, 0x3ACEBD3C, 0xA23F0962,
                0x378D8C7F, 0xEF2F4A76, 0x831E0D5B, 0xC4F49F35, 0x34A0F307, 0x7BA90715, 0xC690AF30, 0xBB09FDC1,
                0x44DDF6D7, 0xEED65794, 0xB05395DB, 0x8C46FDB3, 0xE787F4BE, 0xC5F976D0, 0x48D2F517, 0x07E0B2DD,
                0x521B0A04, 0x2B8E3504, 0x46572E52, 0x4CCB5970, 0xE270188E, 0xA9E9B347, 0x1D8B0CCD, 0xCD9CD8F4,
                0x41D035D0, 0x1F996184, 0xF9093D7E, 0xE248EB56, 0xF76F9A86, 0xE42A1D0C, 0xD29661B1, 0x29B238D3,
                0x474B83A6, 0xC2158B17, 0x99CB9889, 0xF9596E61, 0x2AC2137B, 0xE61321BA, 0x135F8FCD, 0xBE576FF9,
                0xA082F1AA, 0x48F5D8F0, 0xA9FE4177, 0x4F9132DA, 0x06FD550D, 0xBF0E20E6, 0x092EF688, 0xB496F8DD,
                0xDDFC7FD0, 0x50F1FE7D, 0xC7ABFE89, 0xB7575822, 0x122AC856, 0xAA34339F, 0x86AAED3D, 0x1B00A33E,
                0xCAC9E138, 0x3B579DA4, 0x8B2722C2, 0x73A43A42, 0x68190AB5, 0x934A1DD4, 0x181DA997, 0xF07B1309,
                0xD042D970, 0x362BF7DE, 0x3DE2A5C9, 0x3CB769CE, 0x0F7DBB96, 0x169CD10E, 0x38702FEE, 0x45417E56,
                0xEF9D8F64, 0x3E6EA751, 0x757C3593, 0xA7DF968A, 0x9F93D443, 0x72A7F8DF, 0x6F66D026, 0x0C542EAD,
                0x3602F34F, 0xAC58FED6, 0xD40D9FFA, 0xC776C078, 0x5A477507, 0xB6CF460A, 0x416C99EF, 0x4910EA60,
                0x8A638E6F, 0x4C91CE3D, 0x401D9528, 0xA277DEFF, 0xAD47C250, 0x5A9AEF86, 0x599FCE52, 0xD4FBAB34,
                0x9FFCA4B2, 0xDAD4D731, 0x668E5D15, 0x4FE585D5, 0x7832CB02, 0xF727216C, 0xDAA27423, 0xA60F17BD,
                0xC9A83FB4, 0x0206C82A, 0xA38F1593, 0xF6A8E75D, 0x096581BB, 0xEE93E13D, 0xFB763F80, 0x5FF4D818,
                0x851BF706, 0xD2E6187E, 0x23EA4E4D, 0x41EFD306, 0x1C5B961B, 0x6F80D114, 0x4AF73888, 0x34A7749D,
                0xE54A20DB, 0x0196E64A, 0x1B35DD37, 0x53D323FE, 0xD7774720, 0x77DEA9F2, 0x02AF4FE7, 0xF708E38C,
                0x43D839C8, 0xF3B50139, 0x0317EA3C, 0x94599685, 0x3E6C987D, 0x29CE96B5, 0x7255B6CA, 0x9311017A,
                0x90006555, 0x8EE0DBCE, 0x2B340269, 0x9B9D87B4, 0xB66AE833, 0x23264CDE, 0x65A382F6, 0x55D04305,
                0x799B0361, 0xD0DFA8CF, 0xB8321CB7, 0x0F96E89F, 0xE75243E6, 0x56E34DAA, 0xF7DC59F0, 0xC6A254C1,
                0x20763142, 0xAADE08C5, 0xB0FBE9F6, 0x9814F814, 0xC243A991, 0x63240C41, 0x2DB95B91, 0xE32E3ECE,
                0x71D58323, 0xC4099A63, 0xF4121B9F, 0xFF6A92DE, 0xA464009F, 0xBCE7D473, 0x59C7FE25, 0x966BCD3B,
                0x6745374B, 0xA999BE39, 0xA7A1A03F, 0xFA4F35C7, 0x4E9434F5, 0x63DA2689, 0x61DD5505, 0x82D7DF35,
                0x47CD296B, 0x54E43C84, 0x3ACC01E3, 0x2728436C, 0xB6E4E751, 0xFDE73E2D, 0x61FD1F03, 0x80B1896C
            };
            private static readonly UInt32[] S4 = {
                0xF018C293, 0x5520254E, 0x6CF078AE, 0xC2D125C4, 0xCF1ACD98, 0xE455BCC0, 0xBC0C78D9, 0xFBEA64B0,
                0xD936BAC7, 0x9D25EDD6, 0x88438A2C, 0x388A9897, 0x3FDCD819, 0x15A9D3B5, 0x88DCF892, 0x9E1869A1,
                0x05E31DED, 0x23551C7B, 0x09697218, 0x3C032283, 0x50959570, 0x46213323, 0xAA02CA0D, 0xB830F2F3,
                0x23BE9E0A, 0xE6A5F457, 0x8B171EAE, 0x21FE5DF8, 0x66C54579, 0xAE38741F, 0x116010C1, 0x6022599D,
                0xB87F4269, 0x193013E7, 0xE1212A2D, 0x2ABCC493, 0x01234423, 0x1709D99C, 0x1A8BBD5A, 0xF9325A68,
                0xF62C0C4C, 0x33C3AFD0, 0x0C684E8D, 0xDB7F67CC, 0x10D407AB, 0x7D558109, 0x578290EF, 0xA03249E7,
                0xD42FC90B, 0x7867B3AA, 0x0BDB6DD8, 0x7CD48EB7, 0x4DD920CA, 0xC364E5B9, 0xBB585D8C, 0x9450440B,
                0x41EA48FC, 0x98AB7799, 0xBE31EA4B, 0x613CE8D2, 0xEB3ED9F2, 0x0083AD22, 0xBAB1B914, 0xD1C2FBC9,
                0x89A1D8CC, 0xC70467AF, 0x0C3392FC, 0x7BD8368F, 0xBB629FC0, 0xEDF9B8C6, 0x575C6A56, 0xC1F1B1F9,
                0xC2379422, 0xC48248F4, 0x554B5238, 0x26CD820B, 0xAEF07260, 0xB34F7109, 0xF0A3C827, 0x6EB63659,
                0x35EEFE00, 0x07B76B6A, 0x1D85EDA6, 0xB4E09877, 0x9A1B38F1, 0x022E1E43, 0xEFA5C431, 0x365869D8,
                0x533240E8, 0x47646472, 0x4E3FF530, 0x92E7A796, 0xC33B382C, 0x66E401B8, 0x068268D8, 0x351356F5,
                0x2B856BB8, 0x41728B86, 0x29118F33, 0xB1012747, 0x360DA39A, 0x5799B554, 0xAE2F7B14, 0x06142458,
                0x176023B4, 0x0B232299, 0x7F9424DE, 0xE6DF6977, 0x1594036D, 0xD8C1DA2C, 0x39ABC777, 0xBA765584,
                0x806AD233, 0x4B6DD1F0, 0x5376BCE2, 0xCF4C2CF0, 0x4D2D3AEB, 0x1816DEA3, 0x5456DE6F, 0x4DCD2B1F,
                0x8A5E4329, 0x850063B0, 0x3A6D3D3D, 0x6454C3B5, 0x99C304BB, 0x3F57A56F, 0x4ECB37CD, 0x02EFAF48,
                0x55DB1A97, 0xB4778B39, 0xE2084781, 0xE42D7C9B, 0x2F245B98, 0xD9C7931C, 0x879A06A4, 0x01E4C305,
                0x44AFF51B, 0xD573C5CB, 0x35EB0F59, 0x5836AEBA, 0xDB25F1A4, 0xB7E3DFAC, 0xEB5C118A, 0xF906710A,
                0x4D6F843C, 0x9CAD016A, 0x8A869652, 0xEAAA9A0E, 0xF7AB07A4, 0x0918EDB8, 0x5A89572A, 0xEF969C0E,
                0x3189B0F1, 0x10F28E86, 0xEEFC3BA0, 0x56AE1DD2, 0xCF4E215D, 0xD26F4635, 0x7BE91E8B, 0x484C7682,
                0x5832BF16, 0x431B617A, 0x72A70A01, 0xE0643497, 0x293A4557, 0xD06AC8DA, 0xB91A7C38, 0x9A8C975A,
                0xBB284A71, 0x9AFC3CF5, 0x0F8E3E29, 0x6EF16E2E, 0x355ED02F, 0x04ADE3B4, 0x618397DD, 0x4896E3BA,
                0x4E09A5AF, 0x6A705619, 0x362FB1B0, 0x7C1267C0, 0x248E59E0, 0x1750EE5B, 0x0EEF5BF8, 0x614F2C39,
                0x2D9D1811, 0x773A4773, 0xB7A127C4, 0x5E538C89, 0x2FCC7DFF, 0xB19F602C, 0x7D00CBA7, 0x83CBE563,
                0xCBC1A7F3, 0xBA0302D4, 0xD0A0A9AD, 0x625E4DF6, 0x375A4179, 0x9DC68CB5, 0x012564A3, 0x941B743A,
                0x137616EA, 0x5CDD52F2, 0xED32B46D, 0x52977BF7, 0xB04892E3, 0xD74590B9, 0x7294A4A9, 0x5A8A6CE8,
                0x525C6872, 0xF2D75A33, 0x73D8C8AF, 0xDD674809, 0x4BADFB68, 0x83188C00, 0xF5A69645, 0xEA11C451,
                0x7A0C3DD7, 0xE5230B3D, 0xA086BA9B, 0x7631022B, 0x8E2D757A, 0xE8285DA3, 0xD21F99FA, 0x6E061D25,
                0x9434C2AD, 0xD34FD8D3, 0xA9FFC56F, 0xA8E43BFA, 0x1616DD33, 0x60D01570, 0x35E72B7A, 0xF35F5829,
                0x1A04CC2A, 0xB2F918A1, 0x051FE85E, 0x3140C1EC, 0x0D43BF3A, 0x2CADA881, 0x74367CA0, 0x9C5E2753,
                0x7A77C4A0, 0x20C9B9B0, 0xE5A8F796, 0x5A2B88FF, 0x42094808, 0xD79339FB, 0x4469CC37, 0xEC46A5B6,
                0x96BDE46D, 0x5B9AD485, 0xAEFB240D, 0xFE750F70, 0xFF7C29EC, 0x39FCD6CE, 0xEB63DB22, 0x77A784EB
            };

            private static UInt32 F( UInt32 input ) {
                return
                    ((S1[input >> 24]
                    + S2[input >> 16 & 0xff])
                    ^ S3[input >> 8 & 0xff])
                    + S4[input & 0xff];
            }

            public static Byte[] Decrypt( Byte[] input ) {
                int length = input.Length;
                Byte[] output = new Byte[length];
                for ( int i = 0 ; i < length ; i += 8 ) {
                    UInt32 L = BitConverter.ToUInt32(input, i);
                    UInt32 R = BitConverter.ToUInt32(input, i + 4);

                    for ( int r = 16 ; r > 0 ; r -= 2 ) {
                        L ^= P[r + 1];
                        R ^= F(L);
                        R ^= P[r];
                        L ^= F(R);
                    }
                    L ^= P[1];
                    R ^= P[0];

                    UInt32 TMP = L;
                    L = R;
                    R = TMP;

                    Array.Copy(BitConverter.GetBytes(L), 0, output, i, 4);
                    Array.Copy(BitConverter.GetBytes(R), 0, output, i + 4, 4);
                }
                return output;
            }
            public static Byte[] Encrypt( Byte[] input ) {
                int length = input.Length;
                Byte[] output = new Byte[length];
                for ( int i = 0 ; i < length ; i += 8 ) {
                    UInt32 L = BitConverter.ToUInt32(input, i);
                    UInt32 R = BitConverter.ToUInt32(input, i + 4);

                    for ( int r = 0 ; r < 16 ; r += 2 ) {
                        L ^= P[i];
                        R ^= F(L);
                        R ^= P[i + 1];
                        L ^= F(R);
                    }
                    L ^= P[16];
                    R ^= P[17];

                    UInt32 TMP = L;
                    L = R;
                    R = TMP;

                    Array.Copy(BitConverter.GetBytes(L), 0, output, i, 4);
                    Array.Copy(BitConverter.GetBytes(R), 0, output, i + 4, 4);
                }
                return output;
            }
        }

        public MonsterHunterWorldSaveFileEditor(String filePath) : base(filePath) {
            Console.WriteLine($"Initialized MonsterHunterWorldSaveFileEditor");
        }

        public void debug_dump() {
            Console.WriteLine($"Dumping MonsterHunterWorldSaveFileEditor");
            Console.WriteLine($"filePath: {filePath}");

            Byte[] fileBytes = File.ReadAllBytes(filePath);
            Byte[] decrypted = Precomputed_Blowfish.Decrypt( fileBytes );

            hex_dump(decrypted, 0, (UInt64) fileBytes.Length, 32);
        }

        public void hex_dump ( Byte[] bytes, UInt64 start = 0, UInt64 end = 0, UInt64 line_length = 32 ) {
            if (end == 0)
                end = (UInt64)bytes.Length;

            for ( UInt64 i = start; i < end; i += line_length ) {
                Console.Write($"{i:X5} : ");
                for ( UInt64 j = 0; j < line_length; j++ )
                    Console.Write(
                        i + j < end ?
                        $"{bytes[i + j]:X2} " :
                        "    "
                    );
                Console.Write("  ");
                for ( UInt64 j = 0; j < line_length; j++ )
                    if ( i + j < end )
                        Console.Write(
                            bytes[i + j] >= 32 && bytes[i + j] <= 126 ?
                            $"{(char)bytes[i + j]}" :
                            "."
                        );
                Console.WriteLine();
            }
        }
    }
}
